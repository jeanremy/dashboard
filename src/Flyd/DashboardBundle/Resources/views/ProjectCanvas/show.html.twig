{% extends 'FlydDashboardBundle::layout.html.twig' %}

{% block title %}
    <title>{{entity.name}}</title>
{% endblock %}

{% block body %}
    
    <a href="{{ path('projectcanvas_delete', { 'id': entity.id }) }}" class="btn--delete">Delete</a>
    <a href="{{ path('projectcanvas_edit', { 'id': entity.id }) }}" class="btn--edit">Edit</a>

    <h1 class="lvl1">{{entity.name}}</h1>

    <div class="row">
        <div class="col-sm-12">
            <div class="bloc bloc-inline-edition">
                <h2 class="bloc__title">Tâches prédéfinies</h2>
                {% if entity.projectcanvastasks %}
                <table class="taskcontainer">
                    <thead class="thead">
                        <tr>
                            <th>Êtapes</th>
                            <th>Tâche</th>
                            <th>Suppr</th>
                        </tr>
                    </thead>
                    <tbody class="tbody">
                    {% for pct in entity.projectcanvastasks %}
                        <tr id="{{pct.id}}" class="task sortable" data-position="{{pct.position}}">
                            <td>{{pct.task.step|capitalize}}</td>
                            <td>{{pct.task.name|capitalize}}</td>
                            <td><a href="" class="line--remove remove-task">Retirer</a></td>
                        </tr>
                    {% endfor %}                        
                    </tbody>
                </table>
                {% endif %}
                </ul>
               
                <!-- Form pour créer pct avec task imbriquée -->
                {{form_start(pctform, 
                    {'attr': {
                        'class': 'form-horizontal',
                        'id' : 'flyd_dashboardbundle_projectcanvastask'
                    }, 
                     'action': path('projectcanvas_ajax_add_task', {'id': entity.id})}
                )}}
                    <h2 class="bloc__subtitle">Ajouter une tâche</h2>
                    <div class="newtask">  
                        <input type="hidden" name="task_id" id="task_id" />
                        {{ form_widget(pctform.position) }}                      
                        {{ form_label(pctform.task.name, "Nom de la tâche", {'label_attr': {'class': 'control-label'}}) }}
                        {{ form_widget(pctform.task.name, {'attr': {'class': 'form-control'}}) }}

                        {{ form_label(pctform.task.step, "Etape", {'label_attr': {'class': 'control-label'}}) }}
                        {{ form_widget(pctform.task.step, {'attr': {'class': 'form-control'}}) }}
                    </div>


                {{ form_rest(pctform) }}
                {{ form_end(pctform) }}
            </div>      
        </div>
    </div>

{% endblock %}

{% block js %}
    <script type="text/javascript" src="{{ asset('bundles/flyddashboard/js/vendor/jquery-ui/jquery-ui.min.js') }}"></script>
    <link href="{{ asset('bundles/flyddashboard/js/vendor/jquery-ui/jquery-ui.min.css') }}"></link>
    <script>
    
        var tasks = [
            {% for mini in minitasks %}
            { label: "{{mini.name}}", value: "{{mini.name}}", id: "{{mini.id}}", step: "{{mini.step}}" },
            {% endfor %}
        ];

        // Autocomplete
        $('#flyd_dashboardbundle_projectcanvastask_task_name').autocomplete({
            source : tasks,
            select: function( event, ui ) {
                $('#task_id').val(ui.item.id);
                $('#flyd_dashboardbundle_projectcanvastask_task_step').val(ui.item.step);
            }
        });


        // Ajout auto
        $('#flyd_dashboardbundle_projectcanvastask').on('submit', function(e) {
            e.preventDefault();
            $.ajax({
              url:            $(this).attr('action'),
              type:           $(this).attr('method'),
              data: $(this).serialize(),
              beforeSend: function(data) {
              },
              success: function(data) { 
                if(data.code == 200) {
                    $('.tbody').append(data.response);
                    $('#flyd_dashboardbundle_projectcanvastask_position').val(parseInt($('#flyd_dashboardbundle_projectcanvastask_position').val()) + 1);
                }
              },
              error: function(jqXHR, textStatus, errorThrown) {
                console.log(errorThrown);
              }
            });
            return false;
        });

        // remove
        $(document).on('click', '.remove-task', function(e) {
            e.preventDefault();
            var $this = $(this);
            $.ajax({
              url:            "{{path('projectcanvas_ajax_delete_task', {'id': entity.id})}}",
              type:           'POST',
              data: {
                pct_id: $this.parent().parent().attr('id')
              },
              beforeSend: function(data) {
              },
              success: function(data) { 
                if(data.code == 200) {
                    $this.parent().parent().fadeIn(400).remove();
                    $('#flyd_dashboardbundle_projectcanvastask_position').val(parseInt($('#flyd_dashboardbundle_projectcanvastask_position').val()) - 1);
                } else {
                }
              },
              error: function(jqXHR, textStatus, errorThrown) {
                console.log(errorThrown);
              }
            });
            return false;
        });



        //TAF : sorting des tasks et remove task
        // faire un update de toutes les tasks

        // Sortable
        $sort = $('.tbody').sortable({
            update: function( event, ui ) {
                // faire un disable
                // ouis envoie en ajax
                sendTasksOrder();
                console.log('updated');
            },
            placeholder: "ui-sortable-placeholder",
            axis: "y"
        });

        function sendTasksOrder() {
            $sort.sortable("disable");
            $.ajax({
              url:            "{{path('projectcanvas_ajax_reorder_tasks', {'id': entity.id})}}",
              type:           'POST',
              data: {
                pct: $sort.sortable('toArray')
              },
              beforeSend: function(data) {
              },
              success: function(data) { 
                if(data.code == 200) {
                    $sort.sortable("enable");
                } else {
                    console.log(data.response);
                }
              },
              error: function(jqXHR, textStatus, errorThrown) {
                console.log(errorThrown);
              }
            });
        }

    </script>
     <script type="text/javascript" src="{{ asset('bundles/flyddashboard/js/additems.js') }}"></script>   
{% endblock %}