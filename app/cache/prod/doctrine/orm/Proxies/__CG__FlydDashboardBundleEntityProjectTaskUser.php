<?php

namespace Proxies\__CG__\Flyd\DashboardBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class ProjectTaskUser extends \Flyd\DashboardBundle\Entity\ProjectTaskUser implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', '' . "\0" . 'Flyd\\DashboardBundle\\Entity\\ProjectTaskUser' . "\0" . 'project', '' . "\0" . 'Flyd\\DashboardBundle\\Entity\\ProjectTaskUser' . "\0" . 'task', '' . "\0" . 'Flyd\\DashboardBundle\\Entity\\ProjectTaskUser' . "\0" . 'user', '' . "\0" . 'Flyd\\DashboardBundle\\Entity\\ProjectTaskUser' . "\0" . 'position', '' . "\0" . 'Flyd\\DashboardBundle\\Entity\\ProjectTaskUser' . "\0" . 'status', '' . "\0" . 'Flyd\\DashboardBundle\\Entity\\ProjectTaskUser' . "\0" . 'isImportant', '' . "\0" . 'Flyd\\DashboardBundle\\Entity\\ProjectTaskUser' . "\0" . 'estimatedTime', '' . "\0" . 'Flyd\\DashboardBundle\\Entity\\ProjectTaskUser' . "\0" . 'realTime');
        }

        return array('__isInitialized__', '' . "\0" . 'Flyd\\DashboardBundle\\Entity\\ProjectTaskUser' . "\0" . 'project', '' . "\0" . 'Flyd\\DashboardBundle\\Entity\\ProjectTaskUser' . "\0" . 'task', '' . "\0" . 'Flyd\\DashboardBundle\\Entity\\ProjectTaskUser' . "\0" . 'user', '' . "\0" . 'Flyd\\DashboardBundle\\Entity\\ProjectTaskUser' . "\0" . 'position', '' . "\0" . 'Flyd\\DashboardBundle\\Entity\\ProjectTaskUser' . "\0" . 'status', '' . "\0" . 'Flyd\\DashboardBundle\\Entity\\ProjectTaskUser' . "\0" . 'isImportant', '' . "\0" . 'Flyd\\DashboardBundle\\Entity\\ProjectTaskUser' . "\0" . 'estimatedTime', '' . "\0" . 'Flyd\\DashboardBundle\\Entity\\ProjectTaskUser' . "\0" . 'realTime');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (ProjectTaskUser $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setPosition($position)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPosition', array($position));

        return parent::setPosition($position);
    }

    /**
     * {@inheritDoc}
     */
    public function getPosition()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getPosition();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPosition', array());

        return parent::getPosition();
    }

    /**
     * {@inheritDoc}
     */
    public function setProjectCanvas(\Flyd\DashboardBundle\Entity\ProjectCanvas $project_canvas)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProjectCanvas', array($project_canvas));

        return parent::setProjectCanvas($project_canvas);
    }

    /**
     * {@inheritDoc}
     */
    public function getProjectCanvas()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProjectCanvas', array());

        return parent::getProjectCanvas();
    }

    /**
     * {@inheritDoc}
     */
    public function setTask(\Flyd\DashboardBundle\Entity\Task $task)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTask', array($task));

        return parent::setTask($task);
    }

    /**
     * {@inheritDoc}
     */
    public function getTask()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTask', array());

        return parent::getTask();
    }

    /**
     * {@inheritDoc}
     */
    public function setProject(\Flyd\DashboardBundle\Entity\Project $project)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProject', array($project));

        return parent::setProject($project);
    }

    /**
     * {@inheritDoc}
     */
    public function getProject()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProject', array());

        return parent::getProject();
    }

    /**
     * {@inheritDoc}
     */
    public function setUser(\Flyd\DashboardBundle\Entity\User $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUser', array($user));

        return parent::setUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', array());

        return parent::getUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', array($status));

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', array());

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsImportant($isImportant)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsImportant', array($isImportant));

        return parent::setIsImportant($isImportant);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsImportant()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsImportant', array());

        return parent::getIsImportant();
    }

    /**
     * {@inheritDoc}
     */
    public function setEstimatedTime($estimatedTime)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEstimatedTime', array($estimatedTime));

        return parent::setEstimatedTime($estimatedTime);
    }

    /**
     * {@inheritDoc}
     */
    public function getEstimatedTime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEstimatedTime', array());

        return parent::getEstimatedTime();
    }

    /**
     * {@inheritDoc}
     */
    public function setRealTime($realTime)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRealTime', array($realTime));

        return parent::setRealTime($realTime);
    }

    /**
     * {@inheritDoc}
     */
    public function getRealTime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRealTime', array());

        return parent::getRealTime();
    }

}
